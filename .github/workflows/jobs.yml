# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v4
#
#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#
#      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.

#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Run Lint
#        run: ./gradlew lintDebug
#
#      - name: Upload lint report
#        uses: actions/upload-artifact@v4
#        with:
#          name: lintReport.html
#          path: app/build/reports/lint-results-debug.html
#
#  unit-test:
#    needs: [lint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: testReport.html
#          path: app/build/reports/tests/testDebugUnitTest/

  sonar-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate JaCoCo Test Report
        run: ./gradlew test jacocoTestReport

      # Step 5: Run SonarQube Analysis
      - name: Run SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=harsh-kumar-css
            -Dsonar.organization=harsh-kumar-css
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
            -Dsonar.gradle.skipCompile=true
            -Dsonar.sources=app/src/main/java
            -Dsonar.tests=app/src/test/java,app/src/androidTest/java
            -Dsonar.exclusions=**/*Activity.kt,**/*Fragment.kt,app/src/main/res/**/*,app/src/main/java/com/example/movieapp/ui/theme/**/*,**/*.xml,**/build.gradle.kts
            -Dsonar.test.exclusions=**/*Activity.kt,**/*Fragment.kt,**/*.xml
